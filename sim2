close all
clear
clc

%% Ground truth of sample

% Circle for now
pixels = 360;
sample = zeros(pixels,pixels); %create empty array
[y,x] = size(sample); %define y,x as size of array
r = 100; %define radius of a circle
for i=1:y
    for j=1:x
        if ((i-y/2)^2)+((j-x/2)^2)<(r^2)  %define origin is at the center
            sample(i,j) = 1;  %define array inside the circle eq. = 1
        end
    end
end

% figure; imshow(sample)
%% Create sample (low resolution of sample)

%% Generate illumination excitation pattern

lambda = 500e-3;
NA = 0.95;
k0 = 2*NA/lambda;
phase_ = [0 60 120];
% phase_ = [0];

pattern_pixels = pixels*2;
x = 1:pattern_pixels; 
y = 1:pattern_pixels; 
[X,Y] = meshgrid(x,y);
illum = 1+cos(2*pi*k0*X);

for p = 1:length(phase_)
    phase = phase_(p);
    rotated_illum = imrotate(illum,phase);
    win = centerCropWindow2d(size(rotated_illum),size(sample));
    rotated_illum = imcrop(rotated_illum,win);
    
%     imshow(rotated_illum)

%% Multiply sample and pattern in real space, initial intensity I1
    I1 = rotated_illum.*sample;
    % I1 = sample;
%     figure; imshow(I1)

    I1_(:,:,p) = I1;
    %% Convert I1 to frequency space
    
    I1_fft = fft2(I1);
    figure; imshow(I1_fft)
    title("FFT after pattern")

    I1_fft_(:,:,p) = I1_fft;
    %% Multiply with PSF (OTF)
    w = pixels;
    z2 = 1;
    
    fx = linspace(0,w-1,w);
    fy = linspace(0,w-1,w);
    [FX,FY] = meshgrid(fx,fy);
    
    rho = FX.^2 + FY.^2;
    rho_0 = w/2/lambda/z2;
%     H_incoh_freq = 2/pi * (acos(rho/2/rho_0) - rho/2/rho_0 * sqrt(1 - (rho/2/rho_0)^2));
    H_incoh_freq = sample;
    
    E_fft = I1_fft .* H_incoh_freq;
    
    figure; imshow(E_fft)
    title("FFT after OTF")

    E_fft_(:,:,p) = E_fft;
    %% Inverse FT of output intensity, I2
    
    E = ifft2(E_fft);
    figure; imshow(E)
    title("IFFT after OTF")

    E_(:,:,p) = E;
end

%% Separate Frequency Components

phaserad_ = deg2rad(phase_);

M = [ 1 -exp(-1j*phaserad_(1)) -exp(1j*phaserad_(1))
    1 -exp(-1j*phaserad_(2)) -exp(1j*phaserad_(2))
    1 -exp(-1j*phaserad_(3)) -exp(1j*phaserad_(3))];

Minv = inv(M);
Est_1 = Minv(1,1)*E_(:,:,1) + Minv(1,2)*E_(:,:,2) + Minv(1,3)*E_(:,:,3);
Est_2 = Minv(2,1)*E_(:,:,1) + Minv(2,2)*E_(:,:,2) + Minv(2,3)*E_(:,:,3);
Est_3 = Minv(3,1)*E_(:,:,1) + Minv(3,2)*E_(:,:,2) + Minv(3,3)*E_(:,:,3);

%% Merge using Weiner Filter

% w = size(pixels,1);
% wo = w/2;
% fx = linspace(0,w-1,w);
% fy = linspace(0,w-1,w);
% 
% [fX,fY] = meshgrid(fx,fy);

S1 = conj(H_incoh_freq+k0)*Est_1 / abs(H_incoh_freq+k0)^2;
S2 = conj(H_incoh_freq+k0)*Est_2 / abs(H_incoh_freq+k0)^2;
S3 = conj(H_incoh_freq+k0)*Est_3 / abs(H_incoh_freq+k0)^2;

S = S1+S2+S3;

figure; imshow(S);
title("Reconstruction in Frequency Domain")
%%
output = ifft2(S);
figure; imshow(output);
title("IFFT of reconstruction")

